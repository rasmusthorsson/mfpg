on:
    workflow_call:
        inputs:
            os:
                required: true
                type: string
            c-compiler:
                required: true
                type: string
            cxx-compiler:
                required: true
                type: string
            mx-rebuild:
                required: false
                type: boolean
                default: false
            build-tests:
                required: false
                type: boolean
                default: true
            build-type:
                required: false
                type: string
                default: Release
            upload-artifact:
                required: false
                type: boolean
                default: false

jobs:
    build:
        runs-on: ${{ inputs.os }}
        steps:
          #Different behaviour for windows and ubuntu when installing wxWidgets.
            - name: Cache WX x86 Windows
              if: inputs.os == 'windows-latest'
              id: cache-wx-x86
              uses: actions/cache@v3
              with:
                path: C:/Program Files (x86)/wxWidgets
                key: wx-build-3.2.4-windows-x86
                restore-keys: |
                  wx-build-3.2.4-windows-x86

            - name: Checkout WX Windows
              if: inputs.os == 'windows-latest' && steps.cache-wx-x86.outputs.cache-hit != 'true'
              uses: actions/checkout@v3
              with:
                repository: WxWidgets/WxWidgets
                ref: v3.2.4
                path: ${{ github.workspace }}/wxWidgets
                submodules: 'true'

            - name: Configure WX x86 Windows
              if: inputs.os == 'windows-latest' && steps.cache-wx-x86.outputs.cache-hit != 'true'
              run: >
                cmake ${{ github.workspace  }}/WxWidgets
                -DwxBUILD_SHARED=OFF
                -B ${{ github.workspace }}/wx-build-windows-x86

            - name: Build WX x86 Windows
              if: inputs.os == 'windows-latest' && steps.cache-wx-x86.outputs.cache-hit != 'true'
              run: > 
                cmake --build ${{ github.workspace }}/wx-build-windows-x86 
                --target install --config Release 

            #On ubuntu we get the packages through apt.
            - name: Get GTK Ubuntu
              if: inputs.os == 'ubuntu-latest'
              run: |
                sudo apt-get install libgtk-3-dev
            
            - name: Sudo tar for Cache
              run: sudo chown root /bin/tar && sudo chmod u+s /bin/tar

            - name: Cache WX Ubuntu
              if: inputs.os == 'ubuntu-latest'
              id: cache-wx-ubuntu
              uses: actions/cache@v3
              with:
                path: /usr/local/wx-3.2-build/
                key: wx-build-3.2.4-ubuntu
                restore-keys: |
                  wx-build-3.2.4-ubuntu

            - name: Checkout WX Ubuntu
              if: inputs.os == 'ubuntu-latest'
              uses: actions/checkout@v3
              with:
                repository: WxWidgets/WxWidgets
                ref: v3.2.4
                path: ${{ github.workspace }}/wxWidgets
                submodules: 'true'

            - name: Configure WX Ubuntu
              if: inputs.os == 'ubuntu-latest'
              run: >
                cmake ${{ github.workspace  }}/wxWidgets
                -DwxBUILD_SHARED=OFF
                -B ${{ github.workspace }}/wx-build-ubuntu

            - name: Build WX Ubuntu
              if: inputs.os == 'ubuntu-latest'
              run: > 
                sudo cmake --build ${{ github.workspace }}/wx-build-ubuntu --target install --DCMAKE_INSTALL_PREFIX=/usr/local/wx-3.2-build/ -config Release  
            
            - uses: actions/checkout@v3
              with:
                path: mfpg
                submodules: 'true'

            - name: Configure MFPG
              run: >
                cmake mfpg
                -B mfpg/mfpg_build
                -DCMAKE_CXX_COMPILER=${{ inputs.cxx-compiler }}
                -DCMAKE_C_COMPILER=${{ inputs.c-compiler }}
                -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
                -DREBUILD_MX=${{ inputs.mx-rebuild }}
                -DBUILD_TESTS=${{ inputs.build-tests }}
                -DWXW_ROOT_DIR="C:/Program Files (x86)/wxWidgets"
                -DWXW_LIB_DIR="C:/Program Files (x86)/wxWidgets/lib/vc_x64_lib"
                -DWXW_INC_DIR="C:/Program Files (x86)/wxWidgets/include"
                
            - name: Build MFPG
              run: > 
                cmake 
                --build mfpg/mfpg_build 
                --config ${{ inputs.build-type }}

            - name: Test MFPG
              working-directory: mfpg/mfpg_build
              run: >
                ctest 
                --output-on-failure
                --build-config ${{ inputs.build-type }}
            
            - name: Upload GUI Artifact Ubuntu 
              if: inputs.upload-artifact && inputs.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                name: mfpg_gui_artifact_ubuntu
                path: mfpg/mfpg_build/mfpg_gui

            - name: Upload GUI Artifact Window 
              if: inputs.upload-artifact && inputs.os == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                name: mfpg_gui_artifact_windows
                path: mfpg/mfpg_build/Release/mfpg_gui

