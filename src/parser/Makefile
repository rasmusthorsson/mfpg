## File generated by the BNF Converter (bnfc 2.9.5).

CC=g++ -g
CCFLAGS=--ansi --std=c++20 -W -Wall -Wsign-conversion -Wno-unused-parameter -Wno-unused-function -Wno-unneeded-internal-declaration

FLEX=flex
FLEX_OPTS=-Pmfpg_dsl_

BISON=bison
BISON_OPTS=-t -pmfpg_dsl_ -Wcounterexamples

OBJS= Absyn.o Buffer.o Lexer.o Parser.o Printer.o 

.PHONY : clean distclean windows-compat

all : ActionTest windows-compat
clean :
	rm -f *.o ActionTest mfpg_dsl.aux mfpg_dsl.log mfpg_dsl.pdf mfpg_dsl.dvi mfpg_dsl.ps mfpg_dsl Skeleton.* Test.* Printer.* mfpg_dsl.y mfpg_dsl.l

distclean : clean
	rm -f Absyn.C Absyn.H Buffer.C Buffer.H Test.C Bison.H Parser.C Parser.H ParserError.H mfpg_dsl.y Lexer.C mfpg_dsl.l Skeleton.C Skeleton.H Printer.C Printer.H mfpg_dsl.tex *.bak

bnfc : mfpg_dsl.cf
	bnfc --cpp mfpg_dsl.cf

ActionTest : ${OBJS} ActionTest.o
	@echo "Linking ActionTest..."
	${CC} ${OBJS} ActionTest.o -o ActionTest

Absyn.o : Absyn.C Absyn.H
	${CC} ${CCFLAGS} -c Absyn.C

Buffer.o : Buffer.C Buffer.H
	${CC} ${CCFLAGS} -c Buffer.C

Lexer.C : mfpg_dsl.l 
	${FLEX} ${FLEX_OPTS} -o Lexer.C mfpg_dsl.l

Parser.C Bison.H : mfpg_dsl.y
	${BISON} ${BISON_OPTS} mfpg_dsl.y -o Parser.C

Lexer.o : CCFLAGS+=-Wno-sign-conversion

Lexer.o : Lexer.C Bison.H
	${CC} ${CCFLAGS} -c Lexer.C

Parser.o : Parser.C Absyn.H Bison.H
	${CC} ${CCFLAGS} -c Parser.C

Printer.o : Printer.C Printer.H Absyn.H
	${CC} ${CCFLAGS} -c Printer.C

Skeleton.o : Skeleton.C Skeleton.H Absyn.H
	${CC} ${CCFLAGS} -Wno-unused-parameter -c Skeleton.C

#The Lexer.C file uses 'isatty' which is used via "unistd.h". Since this file
#is not available on windows we must include the "io.h" file for windows while
#disabling the "unistd.h" file.

#---------- Remove unistd and add io if windows ----------------
define w
#ifdef _WIN32
#include <io.h>
#define YY_NO_UNISTD_H
#endif
endef

#--------- newline --------------------------------------------
define n


endef
define v
void yylex_destroy_void (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
}
endef
define y
#define yylex_destroy mfpg_dsl_lex_destroy_int
#define yylex_destroy_void mfpg_dsl_lex_destroy
endef
#-------- File append ----------------------------------------
windows-compat: 
	$(file > Lexer.C,$w$n$n$y$n$n$(file < Lexer.C)$n$v)
