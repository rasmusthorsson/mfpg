/* File generated by the BNF Converter (bnfc 2.9.5). */

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Identifier;


/********************   Forward Declarations    ********************/

class Input;
class Output;
class AttrDecl;
class IStr;
class SPos;
class NoteDef;
class NoteDefBase;
class RestDefBase;
class AttrType;
class DurationDefBase;
class Act;
class ActionName;
class Dep;
class DFun;
class CFun;
class Attr;
class CompOp;
class BoolOp;
class Num;
class CNoteDef;
class CDurationDef;
class Exp;
class Scale;
class Bool;
class BInput;
class DOutput;
class IOutput;
class DAttr;
class StringDef;
class ISPos;
class INote;
class NNote;
class NoteDefBase_A;
class NoteDefBase_As;
class NoteDefBase_B;
class NoteDefBase_C;
class NoteDefBase_Cs;
class NoteDefBase_D;
class NoteDefBase_Ds;
class NoteDefBase_E;
class NoteDefBase_F;
class NoteDefBase_Fs;
class NoteDefBase_G;
class NoteDefBase_Gs;
class RestDefBase_REST;
class AttrType_i;
class AttrType_d;
class AttrType_b;
class DurationDefBase_Double;
class DurationDefBase_Whole;
class DurationDefBase_Half;
class DurationDefBase_Quarter;
class DurationDefBase_Eighth;
class DurationDefBase_Sixteenth;
class DurationDefBase_ThirtySecond;
class DurationDefBase_SixtyFourth;
class FunList;
class AName;
class ADeps;
class CombDist;
class ScaledDist;
class DirectDist;
class ConstDist;
class CombCond;
class CompCond;
class FrValueCond;
class ToValueCond;
class BoolCond;
class FrAttrCond;
class ToAttrCond;
class EAttr;
class Eq;
class NEq;
class Gt;
class Lt;
class Gte;
class Lte;
class And;
class Or;
class CInt;
class CDouble;
class CNote;
class CDuration;
class CNRestNote;
class CNNote;
class CNDuration;
class ESub;
class EPlus;
class SMul;
class VTrue;
class VFalse;
class ListAttrDecl;
class ListIStr;
class ListAct;
class ListDep;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitInput(Input *p) = 0;
  virtual void visitOutput(Output *p) = 0;
  virtual void visitAttrDecl(AttrDecl *p) = 0;
  virtual void visitIStr(IStr *p) = 0;
  virtual void visitSPos(SPos *p) = 0;
  virtual void visitNoteDef(NoteDef *p) = 0;
  virtual void visitNoteDefBase(NoteDefBase *p) = 0;
  virtual void visitRestDefBase(RestDefBase *p) = 0;
  virtual void visitAttrType(AttrType *p) = 0;
  virtual void visitDurationDefBase(DurationDefBase *p) = 0;
  virtual void visitAct(Act *p) = 0;
  virtual void visitActionName(ActionName *p) = 0;
  virtual void visitDep(Dep *p) = 0;
  virtual void visitDFun(DFun *p) = 0;
  virtual void visitCFun(CFun *p) = 0;
  virtual void visitAttr(Attr *p) = 0;
  virtual void visitCompOp(CompOp *p) = 0;
  virtual void visitBoolOp(BoolOp *p) = 0;
  virtual void visitNum(Num *p) = 0;
  virtual void visitCNoteDef(CNoteDef *p) = 0;
  virtual void visitCDurationDef(CDurationDef *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitScale(Scale *p) = 0;
  virtual void visitBool(Bool *p) = 0;
  virtual void visitBInput(BInput *p) = 0;
  virtual void visitDOutput(DOutput *p) = 0;
  virtual void visitIOutput(IOutput *p) = 0;
  virtual void visitDAttr(DAttr *p) = 0;
  virtual void visitStringDef(StringDef *p) = 0;
  virtual void visitISPos(ISPos *p) = 0;
  virtual void visitINote(INote *p) = 0;
  virtual void visitNNote(NNote *p) = 0;
  virtual void visitNoteDefBase_A(NoteDefBase_A *p) = 0;
  virtual void visitNoteDefBase_As(NoteDefBase_As *p) = 0;
  virtual void visitNoteDefBase_B(NoteDefBase_B *p) = 0;
  virtual void visitNoteDefBase_C(NoteDefBase_C *p) = 0;
  virtual void visitNoteDefBase_Cs(NoteDefBase_Cs *p) = 0;
  virtual void visitNoteDefBase_D(NoteDefBase_D *p) = 0;
  virtual void visitNoteDefBase_Ds(NoteDefBase_Ds *p) = 0;
  virtual void visitNoteDefBase_E(NoteDefBase_E *p) = 0;
  virtual void visitNoteDefBase_F(NoteDefBase_F *p) = 0;
  virtual void visitNoteDefBase_Fs(NoteDefBase_Fs *p) = 0;
  virtual void visitNoteDefBase_G(NoteDefBase_G *p) = 0;
  virtual void visitNoteDefBase_Gs(NoteDefBase_Gs *p) = 0;
  virtual void visitRestDefBase_REST(RestDefBase_REST *p) = 0;
  virtual void visitAttrType_i(AttrType_i *p) = 0;
  virtual void visitAttrType_d(AttrType_d *p) = 0;
  virtual void visitAttrType_b(AttrType_b *p) = 0;
  virtual void visitDurationDefBase_Double(DurationDefBase_Double *p) = 0;
  virtual void visitDurationDefBase_Whole(DurationDefBase_Whole *p) = 0;
  virtual void visitDurationDefBase_Half(DurationDefBase_Half *p) = 0;
  virtual void visitDurationDefBase_Quarter(DurationDefBase_Quarter *p) = 0;
  virtual void visitDurationDefBase_Eighth(DurationDefBase_Eighth *p) = 0;
  virtual void visitDurationDefBase_Sixteenth(DurationDefBase_Sixteenth *p) = 0;
  virtual void visitDurationDefBase_ThirtySecond(DurationDefBase_ThirtySecond *p) = 0;
  virtual void visitDurationDefBase_SixtyFourth(DurationDefBase_SixtyFourth *p) = 0;
  virtual void visitFunList(FunList *p) = 0;
  virtual void visitAName(AName *p) = 0;
  virtual void visitADeps(ADeps *p) = 0;
  virtual void visitCombDist(CombDist *p) = 0;
  virtual void visitScaledDist(ScaledDist *p) = 0;
  virtual void visitDirectDist(DirectDist *p) = 0;
  virtual void visitConstDist(ConstDist *p) = 0;
  virtual void visitCombCond(CombCond *p) = 0;
  virtual void visitCompCond(CompCond *p) = 0;
  virtual void visitFrValueCond(FrValueCond *p) = 0;
  virtual void visitToValueCond(ToValueCond *p) = 0;
  virtual void visitBoolCond(BoolCond *p) = 0;
  virtual void visitFrAttrCond(FrAttrCond *p) = 0;
  virtual void visitToAttrCond(ToAttrCond *p) = 0;
  virtual void visitEAttr(EAttr *p) = 0;
  virtual void visitEq(Eq *p) = 0;
  virtual void visitNEq(NEq *p) = 0;
  virtual void visitGt(Gt *p) = 0;
  virtual void visitLt(Lt *p) = 0;
  virtual void visitGte(Gte *p) = 0;
  virtual void visitLte(Lte *p) = 0;
  virtual void visitAnd(And *p) = 0;
  virtual void visitOr(Or *p) = 0;
  virtual void visitCInt(CInt *p) = 0;
  virtual void visitCDouble(CDouble *p) = 0;
  virtual void visitCNote(CNote *p) = 0;
  virtual void visitCDuration(CDuration *p) = 0;
  virtual void visitCNRestNote(CNRestNote *p) = 0;
  virtual void visitCNNote(CNNote *p) = 0;
  virtual void visitCNDuration(CNDuration *p) = 0;
  virtual void visitESub(ESub *p) = 0;
  virtual void visitEPlus(EPlus *p) = 0;
  virtual void visitSMul(SMul *p) = 0;
  virtual void visitVTrue(VTrue *p) = 0;
  virtual void visitVFalse(VFalse *p) = 0;
  virtual void visitListAttrDecl(ListAttrDecl *p) = 0;
  virtual void visitListIStr(ListIStr *p) = 0;
  virtual void visitListAct(ListAct *p) = 0;
  virtual void visitListDep(ListDep *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitIdentifier(Identifier x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Input : public Visitable
{
public:
  virtual Input *clone() const = 0;

};

class Output : public Visitable
{
public:
  virtual Output *clone() const = 0;

};

class AttrDecl : public Visitable
{
public:
  virtual AttrDecl *clone() const = 0;

};

class IStr : public Visitable
{
public:
  virtual IStr *clone() const = 0;

};

class SPos : public Visitable
{
public:
  virtual SPos *clone() const = 0;

};

class NoteDef : public Visitable
{
public:
  virtual NoteDef *clone() const = 0;

};

class NoteDefBase : public Visitable
{
public:
  virtual NoteDefBase *clone() const = 0;

};

class RestDefBase : public Visitable
{
public:
  virtual RestDefBase *clone() const = 0;

};

class AttrType : public Visitable
{
public:
  virtual AttrType *clone() const = 0;

};

class DurationDefBase : public Visitable
{
public:
  virtual DurationDefBase *clone() const = 0;

};

class Act : public Visitable
{
public:
  virtual Act *clone() const = 0;

};

class ActionName : public Visitable
{
public:
  virtual ActionName *clone() const = 0;

};

class Dep : public Visitable
{
public:
  virtual Dep *clone() const = 0;

};

class DFun : public Visitable
{
public:
  virtual DFun *clone() const = 0;

};

class CFun : public Visitable
{
public:
  virtual CFun *clone() const = 0;

};

class Attr : public Visitable
{
public:
  virtual Attr *clone() const = 0;

};

class CompOp : public Visitable
{
public:
  virtual CompOp *clone() const = 0;

};

class BoolOp : public Visitable
{
public:
  virtual BoolOp *clone() const = 0;

};

class Num : public Visitable
{
public:
  virtual Num *clone() const = 0;

};

class CNoteDef : public Visitable
{
public:
  virtual CNoteDef *clone() const = 0;

};

class CDurationDef : public Visitable
{
public:
  virtual CDurationDef *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Scale : public Visitable
{
public:
  virtual Scale *clone() const = 0;

};

class Bool : public Visitable
{
public:
  virtual Bool *clone() const = 0;

};



class BInput : public Input
{
public:
  Output *output_;
  ListAttrDecl *listattrdecl_;
  ListIStr *lististr_;
  ListAct *listact_;
  ListDep *listdep_;

  BInput(const BInput &);
  BInput &operator=(const BInput &);
  BInput(Output *p1, ListAttrDecl *p2, ListIStr *p3, ListAct *p4, ListDep *p5);
  ~BInput();
  virtual void accept(Visitor *v);
  virtual BInput *clone() const;
  void swap(BInput &);
};

class DOutput : public Output
{
public:

  DOutput(const DOutput &);
  DOutput &operator=(const DOutput &);
  DOutput();
  ~DOutput();
  virtual void accept(Visitor *v);
  virtual DOutput *clone() const;
  void swap(DOutput &);
};

class IOutput : public Output
{
public:

  IOutput(const IOutput &);
  IOutput &operator=(const IOutput &);
  IOutput();
  ~IOutput();
  virtual void accept(Visitor *v);
  virtual IOutput *clone() const;
  void swap(IOutput &);
};

class DAttr : public AttrDecl
{
public:
  AttrType *attrtype_;
  Attr *attr_;

  DAttr(const DAttr &);
  DAttr &operator=(const DAttr &);
  DAttr(AttrType *p1, Attr *p2);
  ~DAttr();
  virtual void accept(Visitor *v);
  virtual DAttr *clone() const;
  void swap(DAttr &);
};

class StringDef : public IStr
{
public:
  SPos *spos_;
  NoteDef *notedef_1;
  NoteDef *notedef_2;

  StringDef(const StringDef &);
  StringDef &operator=(const StringDef &);
  StringDef(SPos *p1, NoteDef *p2, NoteDef *p3);
  ~StringDef();
  virtual void accept(Visitor *v);
  virtual StringDef *clone() const;
  void swap(StringDef &);
};

class ISPos : public SPos
{
public:
  Integer integer_;

  ISPos(const ISPos &);
  ISPos &operator=(const ISPos &);
  ISPos(Integer p1);
  ~ISPos();
  virtual void accept(Visitor *v);
  virtual ISPos *clone() const;
  void swap(ISPos &);
};

class INote : public NoteDef
{
public:
  Integer integer_;

  INote(const INote &);
  INote &operator=(const INote &);
  INote(Integer p1);
  ~INote();
  virtual void accept(Visitor *v);
  virtual INote *clone() const;
  void swap(INote &);
};

class NNote : public NoteDef
{
public:
  NoteDefBase *notedefbase_;
  Integer integer_;

  NNote(const NNote &);
  NNote &operator=(const NNote &);
  NNote(NoteDefBase *p1, Integer p2);
  ~NNote();
  virtual void accept(Visitor *v);
  virtual NNote *clone() const;
  void swap(NNote &);
};

class NoteDefBase_A : public NoteDefBase
{
public:

  NoteDefBase_A(const NoteDefBase_A &);
  NoteDefBase_A &operator=(const NoteDefBase_A &);
  NoteDefBase_A();
  ~NoteDefBase_A();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_A *clone() const;
  void swap(NoteDefBase_A &);
};

class NoteDefBase_As : public NoteDefBase
{
public:

  NoteDefBase_As(const NoteDefBase_As &);
  NoteDefBase_As &operator=(const NoteDefBase_As &);
  NoteDefBase_As();
  ~NoteDefBase_As();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_As *clone() const;
  void swap(NoteDefBase_As &);
};

class NoteDefBase_B : public NoteDefBase
{
public:

  NoteDefBase_B(const NoteDefBase_B &);
  NoteDefBase_B &operator=(const NoteDefBase_B &);
  NoteDefBase_B();
  ~NoteDefBase_B();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_B *clone() const;
  void swap(NoteDefBase_B &);
};

class NoteDefBase_C : public NoteDefBase
{
public:

  NoteDefBase_C(const NoteDefBase_C &);
  NoteDefBase_C &operator=(const NoteDefBase_C &);
  NoteDefBase_C();
  ~NoteDefBase_C();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_C *clone() const;
  void swap(NoteDefBase_C &);
};

class NoteDefBase_Cs : public NoteDefBase
{
public:

  NoteDefBase_Cs(const NoteDefBase_Cs &);
  NoteDefBase_Cs &operator=(const NoteDefBase_Cs &);
  NoteDefBase_Cs();
  ~NoteDefBase_Cs();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_Cs *clone() const;
  void swap(NoteDefBase_Cs &);
};

class NoteDefBase_D : public NoteDefBase
{
public:

  NoteDefBase_D(const NoteDefBase_D &);
  NoteDefBase_D &operator=(const NoteDefBase_D &);
  NoteDefBase_D();
  ~NoteDefBase_D();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_D *clone() const;
  void swap(NoteDefBase_D &);
};

class NoteDefBase_Ds : public NoteDefBase
{
public:

  NoteDefBase_Ds(const NoteDefBase_Ds &);
  NoteDefBase_Ds &operator=(const NoteDefBase_Ds &);
  NoteDefBase_Ds();
  ~NoteDefBase_Ds();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_Ds *clone() const;
  void swap(NoteDefBase_Ds &);
};

class NoteDefBase_E : public NoteDefBase
{
public:

  NoteDefBase_E(const NoteDefBase_E &);
  NoteDefBase_E &operator=(const NoteDefBase_E &);
  NoteDefBase_E();
  ~NoteDefBase_E();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_E *clone() const;
  void swap(NoteDefBase_E &);
};

class NoteDefBase_F : public NoteDefBase
{
public:

  NoteDefBase_F(const NoteDefBase_F &);
  NoteDefBase_F &operator=(const NoteDefBase_F &);
  NoteDefBase_F();
  ~NoteDefBase_F();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_F *clone() const;
  void swap(NoteDefBase_F &);
};

class NoteDefBase_Fs : public NoteDefBase
{
public:

  NoteDefBase_Fs(const NoteDefBase_Fs &);
  NoteDefBase_Fs &operator=(const NoteDefBase_Fs &);
  NoteDefBase_Fs();
  ~NoteDefBase_Fs();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_Fs *clone() const;
  void swap(NoteDefBase_Fs &);
};

class NoteDefBase_G : public NoteDefBase
{
public:

  NoteDefBase_G(const NoteDefBase_G &);
  NoteDefBase_G &operator=(const NoteDefBase_G &);
  NoteDefBase_G();
  ~NoteDefBase_G();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_G *clone() const;
  void swap(NoteDefBase_G &);
};

class NoteDefBase_Gs : public NoteDefBase
{
public:

  NoteDefBase_Gs(const NoteDefBase_Gs &);
  NoteDefBase_Gs &operator=(const NoteDefBase_Gs &);
  NoteDefBase_Gs();
  ~NoteDefBase_Gs();
  virtual void accept(Visitor *v);
  virtual NoteDefBase_Gs *clone() const;
  void swap(NoteDefBase_Gs &);
};

class RestDefBase_REST : public RestDefBase
{
public:

  RestDefBase_REST(const RestDefBase_REST &);
  RestDefBase_REST &operator=(const RestDefBase_REST &);
  RestDefBase_REST();
  ~RestDefBase_REST();
  virtual void accept(Visitor *v);
  virtual RestDefBase_REST *clone() const;
  void swap(RestDefBase_REST &);
};

class AttrType_i : public AttrType
{
public:

  AttrType_i(const AttrType_i &);
  AttrType_i &operator=(const AttrType_i &);
  AttrType_i();
  ~AttrType_i();
  virtual void accept(Visitor *v);
  virtual AttrType_i *clone() const;
  void swap(AttrType_i &);
};

class AttrType_d : public AttrType
{
public:

  AttrType_d(const AttrType_d &);
  AttrType_d &operator=(const AttrType_d &);
  AttrType_d();
  ~AttrType_d();
  virtual void accept(Visitor *v);
  virtual AttrType_d *clone() const;
  void swap(AttrType_d &);
};

class AttrType_b : public AttrType
{
public:

  AttrType_b(const AttrType_b &);
  AttrType_b &operator=(const AttrType_b &);
  AttrType_b();
  ~AttrType_b();
  virtual void accept(Visitor *v);
  virtual AttrType_b *clone() const;
  void swap(AttrType_b &);
};

class DurationDefBase_Double : public DurationDefBase
{
public:

  DurationDefBase_Double(const DurationDefBase_Double &);
  DurationDefBase_Double &operator=(const DurationDefBase_Double &);
  DurationDefBase_Double();
  ~DurationDefBase_Double();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Double *clone() const;
  void swap(DurationDefBase_Double &);
};

class DurationDefBase_Whole : public DurationDefBase
{
public:

  DurationDefBase_Whole(const DurationDefBase_Whole &);
  DurationDefBase_Whole &operator=(const DurationDefBase_Whole &);
  DurationDefBase_Whole();
  ~DurationDefBase_Whole();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Whole *clone() const;
  void swap(DurationDefBase_Whole &);
};

class DurationDefBase_Half : public DurationDefBase
{
public:

  DurationDefBase_Half(const DurationDefBase_Half &);
  DurationDefBase_Half &operator=(const DurationDefBase_Half &);
  DurationDefBase_Half();
  ~DurationDefBase_Half();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Half *clone() const;
  void swap(DurationDefBase_Half &);
};

class DurationDefBase_Quarter : public DurationDefBase
{
public:

  DurationDefBase_Quarter(const DurationDefBase_Quarter &);
  DurationDefBase_Quarter &operator=(const DurationDefBase_Quarter &);
  DurationDefBase_Quarter();
  ~DurationDefBase_Quarter();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Quarter *clone() const;
  void swap(DurationDefBase_Quarter &);
};

class DurationDefBase_Eighth : public DurationDefBase
{
public:

  DurationDefBase_Eighth(const DurationDefBase_Eighth &);
  DurationDefBase_Eighth &operator=(const DurationDefBase_Eighth &);
  DurationDefBase_Eighth();
  ~DurationDefBase_Eighth();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Eighth *clone() const;
  void swap(DurationDefBase_Eighth &);
};

class DurationDefBase_Sixteenth : public DurationDefBase
{
public:

  DurationDefBase_Sixteenth(const DurationDefBase_Sixteenth &);
  DurationDefBase_Sixteenth &operator=(const DurationDefBase_Sixteenth &);
  DurationDefBase_Sixteenth();
  ~DurationDefBase_Sixteenth();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_Sixteenth *clone() const;
  void swap(DurationDefBase_Sixteenth &);
};

class DurationDefBase_ThirtySecond : public DurationDefBase
{
public:

  DurationDefBase_ThirtySecond(const DurationDefBase_ThirtySecond &);
  DurationDefBase_ThirtySecond &operator=(const DurationDefBase_ThirtySecond &);
  DurationDefBase_ThirtySecond();
  ~DurationDefBase_ThirtySecond();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_ThirtySecond *clone() const;
  void swap(DurationDefBase_ThirtySecond &);
};

class DurationDefBase_SixtyFourth : public DurationDefBase
{
public:

  DurationDefBase_SixtyFourth(const DurationDefBase_SixtyFourth &);
  DurationDefBase_SixtyFourth &operator=(const DurationDefBase_SixtyFourth &);
  DurationDefBase_SixtyFourth();
  ~DurationDefBase_SixtyFourth();
  virtual void accept(Visitor *v);
  virtual DurationDefBase_SixtyFourth *clone() const;
  void swap(DurationDefBase_SixtyFourth &);
};

class FunList : public Act
{
public:
  ActionName *actionname_;
  CFun *cfun_;
  DFun *dfun_;
  Bool *bool_;

  FunList(const FunList &);
  FunList &operator=(const FunList &);
  FunList(ActionName *p1, CFun *p2, DFun *p3, Bool *p4);
  ~FunList();
  virtual void accept(Visitor *v);
  virtual FunList *clone() const;
  void swap(FunList &);
};

class AName : public ActionName
{
public:
  Identifier identifier_;

  AName(const AName &);
  AName &operator=(const AName &);
  AName(Identifier p1);
  ~AName();
  virtual void accept(Visitor *v);
  virtual AName *clone() const;
  void swap(AName &);
};

class ADeps : public Dep
{
public:
  Identifier identifier_1;
  Identifier identifier_2;
  Bool *bool_;

  ADeps(const ADeps &);
  ADeps &operator=(const ADeps &);
  ADeps(Identifier p1, Identifier p2, Bool *p3);
  ~ADeps();
  virtual void accept(Visitor *v);
  virtual ADeps *clone() const;
  void swap(ADeps &);
};

class CombDist : public DFun
{
public:
  DFun *dfun_1;
  Exp *exp_;
  DFun *dfun_2;

  CombDist(const CombDist &);
  CombDist &operator=(const CombDist &);
  CombDist(DFun *p1, Exp *p2, DFun *p3);
  ~CombDist();
  virtual void accept(Visitor *v);
  virtual CombDist *clone() const;
  void swap(CombDist &);
};

class ScaledDist : public DFun
{
public:
  Attr *attr_1;
  Exp *exp_;
  Attr *attr_2;
  Scale *scale_;
  Num *num_;

  ScaledDist(const ScaledDist &);
  ScaledDist &operator=(const ScaledDist &);
  ScaledDist(Attr *p1, Exp *p2, Attr *p3, Scale *p4, Num *p5);
  ~ScaledDist();
  virtual void accept(Visitor *v);
  virtual ScaledDist *clone() const;
  void swap(ScaledDist &);
};

class DirectDist : public DFun
{
public:
  Attr *attr_1;
  Exp *exp_;
  Attr *attr_2;

  DirectDist(const DirectDist &);
  DirectDist &operator=(const DirectDist &);
  DirectDist(Attr *p1, Exp *p2, Attr *p3);
  ~DirectDist();
  virtual void accept(Visitor *v);
  virtual DirectDist *clone() const;
  void swap(DirectDist &);
};

class ConstDist : public DFun
{
public:
  Num *num_;

  ConstDist(const ConstDist &);
  ConstDist &operator=(const ConstDist &);
  ConstDist(Num *p1);
  ~ConstDist();
  virtual void accept(Visitor *v);
  virtual ConstDist *clone() const;
  void swap(ConstDist &);
};

class CombCond : public CFun
{
public:
  CFun *cfun_1;
  BoolOp *boolop_;
  CFun *cfun_2;

  CombCond(const CombCond &);
  CombCond &operator=(const CombCond &);
  CombCond(CFun *p1, BoolOp *p2, CFun *p3);
  ~CombCond();
  virtual void accept(Visitor *v);
  virtual CombCond *clone() const;
  void swap(CombCond &);
};

class CompCond : public CFun
{
public:
  Attr *attr_1;
  Exp *exp_;
  Attr *attr_2;
  CompOp *compop_;
  Num *num_;

  CompCond(const CompCond &);
  CompCond &operator=(const CompCond &);
  CompCond(Attr *p1, Exp *p2, Attr *p3, CompOp *p4, Num *p5);
  ~CompCond();
  virtual void accept(Visitor *v);
  virtual CompCond *clone() const;
  void swap(CompCond &);
};

class FrValueCond : public CFun
{
public:
  Attr *attr_;
  CompOp *compop_;
  Num *num_;

  FrValueCond(const FrValueCond &);
  FrValueCond &operator=(const FrValueCond &);
  FrValueCond(Attr *p1, CompOp *p2, Num *p3);
  ~FrValueCond();
  virtual void accept(Visitor *v);
  virtual FrValueCond *clone() const;
  void swap(FrValueCond &);
};

class ToValueCond : public CFun
{
public:
  Attr *attr_;
  CompOp *compop_;
  Num *num_;

  ToValueCond(const ToValueCond &);
  ToValueCond &operator=(const ToValueCond &);
  ToValueCond(Attr *p1, CompOp *p2, Num *p3);
  ~ToValueCond();
  virtual void accept(Visitor *v);
  virtual ToValueCond *clone() const;
  void swap(ToValueCond &);
};

class BoolCond : public CFun
{
public:
  Bool *bool_;

  BoolCond(const BoolCond &);
  BoolCond &operator=(const BoolCond &);
  BoolCond(Bool *p1);
  ~BoolCond();
  virtual void accept(Visitor *v);
  virtual BoolCond *clone() const;
  void swap(BoolCond &);
};

class FrAttrCond : public CFun
{
public:
  Attr *attr_;

  FrAttrCond(const FrAttrCond &);
  FrAttrCond &operator=(const FrAttrCond &);
  FrAttrCond(Attr *p1);
  ~FrAttrCond();
  virtual void accept(Visitor *v);
  virtual FrAttrCond *clone() const;
  void swap(FrAttrCond &);
};

class ToAttrCond : public CFun
{
public:
  Attr *attr_;

  ToAttrCond(const ToAttrCond &);
  ToAttrCond &operator=(const ToAttrCond &);
  ToAttrCond(Attr *p1);
  ~ToAttrCond();
  virtual void accept(Visitor *v);
  virtual ToAttrCond *clone() const;
  void swap(ToAttrCond &);
};

class EAttr : public Attr
{
public:
  Identifier identifier_;

  EAttr(const EAttr &);
  EAttr &operator=(const EAttr &);
  EAttr(Identifier p1);
  ~EAttr();
  virtual void accept(Visitor *v);
  virtual EAttr *clone() const;
  void swap(EAttr &);
};

class Eq : public CompOp
{
public:

  Eq(const Eq &);
  Eq &operator=(const Eq &);
  Eq();
  ~Eq();
  virtual void accept(Visitor *v);
  virtual Eq *clone() const;
  void swap(Eq &);
};

class NEq : public CompOp
{
public:

  NEq(const NEq &);
  NEq &operator=(const NEq &);
  NEq();
  ~NEq();
  virtual void accept(Visitor *v);
  virtual NEq *clone() const;
  void swap(NEq &);
};

class Gt : public CompOp
{
public:

  Gt(const Gt &);
  Gt &operator=(const Gt &);
  Gt();
  ~Gt();
  virtual void accept(Visitor *v);
  virtual Gt *clone() const;
  void swap(Gt &);
};

class Lt : public CompOp
{
public:

  Lt(const Lt &);
  Lt &operator=(const Lt &);
  Lt();
  ~Lt();
  virtual void accept(Visitor *v);
  virtual Lt *clone() const;
  void swap(Lt &);
};

class Gte : public CompOp
{
public:

  Gte(const Gte &);
  Gte &operator=(const Gte &);
  Gte();
  ~Gte();
  virtual void accept(Visitor *v);
  virtual Gte *clone() const;
  void swap(Gte &);
};

class Lte : public CompOp
{
public:

  Lte(const Lte &);
  Lte &operator=(const Lte &);
  Lte();
  ~Lte();
  virtual void accept(Visitor *v);
  virtual Lte *clone() const;
  void swap(Lte &);
};

class And : public BoolOp
{
public:

  And(const And &);
  And &operator=(const And &);
  And();
  ~And();
  virtual void accept(Visitor *v);
  virtual And *clone() const;
  void swap(And &);
};

class Or : public BoolOp
{
public:

  Or(const Or &);
  Or &operator=(const Or &);
  Or();
  ~Or();
  virtual void accept(Visitor *v);
  virtual Or *clone() const;
  void swap(Or &);
};

class CInt : public Num
{
public:
  Integer integer_;

  CInt(const CInt &);
  CInt &operator=(const CInt &);
  CInt(Integer p1);
  ~CInt();
  virtual void accept(Visitor *v);
  virtual CInt *clone() const;
  void swap(CInt &);
};

class CDouble : public Num
{
public:
  Double double_;

  CDouble(const CDouble &);
  CDouble &operator=(const CDouble &);
  CDouble(Double p1);
  ~CDouble();
  virtual void accept(Visitor *v);
  virtual CDouble *clone() const;
  void swap(CDouble &);
};

class CNote : public Num
{
public:
  CNoteDef *cnotedef_;

  CNote(const CNote &);
  CNote &operator=(const CNote &);
  CNote(CNoteDef *p1);
  ~CNote();
  virtual void accept(Visitor *v);
  virtual CNote *clone() const;
  void swap(CNote &);
};

class CDuration : public Num
{
public:
  CDurationDef *cdurationdef_;

  CDuration(const CDuration &);
  CDuration &operator=(const CDuration &);
  CDuration(CDurationDef *p1);
  ~CDuration();
  virtual void accept(Visitor *v);
  virtual CDuration *clone() const;
  void swap(CDuration &);
};

class CNRestNote : public CNoteDef
{
public:
  RestDefBase *restdefbase_;

  CNRestNote(const CNRestNote &);
  CNRestNote &operator=(const CNRestNote &);
  CNRestNote(RestDefBase *p1);
  ~CNRestNote();
  virtual void accept(Visitor *v);
  virtual CNRestNote *clone() const;
  void swap(CNRestNote &);
};

class CNNote : public CNoteDef
{
public:
  NoteDefBase *notedefbase_;
  Integer integer_;

  CNNote(const CNNote &);
  CNNote &operator=(const CNNote &);
  CNNote(NoteDefBase *p1, Integer p2);
  ~CNNote();
  virtual void accept(Visitor *v);
  virtual CNNote *clone() const;
  void swap(CNNote &);
};

class CNDuration : public CDurationDef
{
public:
  DurationDefBase *durationdefbase_;

  CNDuration(const CNDuration &);
  CNDuration &operator=(const CNDuration &);
  CNDuration(DurationDefBase *p1);
  ~CNDuration();
  virtual void accept(Visitor *v);
  virtual CNDuration *clone() const;
  void swap(CNDuration &);
};

class ESub : public Exp
{
public:

  ESub(const ESub &);
  ESub &operator=(const ESub &);
  ESub();
  ~ESub();
  virtual void accept(Visitor *v);
  virtual ESub *clone() const;
  void swap(ESub &);
};

class EPlus : public Exp
{
public:

  EPlus(const EPlus &);
  EPlus &operator=(const EPlus &);
  EPlus();
  ~EPlus();
  virtual void accept(Visitor *v);
  virtual EPlus *clone() const;
  void swap(EPlus &);
};

class SMul : public Scale
{
public:

  SMul(const SMul &);
  SMul &operator=(const SMul &);
  SMul();
  ~SMul();
  virtual void accept(Visitor *v);
  virtual SMul *clone() const;
  void swap(SMul &);
};

class VTrue : public Bool
{
public:

  VTrue(const VTrue &);
  VTrue &operator=(const VTrue &);
  VTrue();
  ~VTrue();
  virtual void accept(Visitor *v);
  virtual VTrue *clone() const;
  void swap(VTrue &);
};

class VFalse : public Bool
{
public:

  VFalse(const VFalse &);
  VFalse &operator=(const VFalse &);
  VFalse();
  ~VFalse();
  virtual void accept(Visitor *v);
  virtual VFalse *clone() const;
  void swap(VFalse &);
};



class ListAttrDecl : public Visitable, public std::vector<AttrDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttrDecl *clone() const;
};

ListAttrDecl* consListAttrDecl(AttrDecl* x, ListAttrDecl* xs);

class ListIStr : public Visitable, public std::vector<IStr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListIStr *clone() const;
};

ListIStr* consListIStr(IStr* x, ListIStr* xs);

class ListAct : public Visitable, public std::vector<Act*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAct *clone() const;
};

ListAct* consListAct(Act* x, ListAct* xs);

class ListDep : public Visitable, public std::vector<Dep*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDep *clone() const;
};

ListDep* consListDep(Dep* x, ListDep* xs);





#endif
